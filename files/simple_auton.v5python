{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nleft_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 392, 315, MM, 1.4)\nfour_bar = Motor(Ports.PORT17, GearSetting.RATIO_36_1, False)\nfourbarclamp = Motor(Ports.PORT20, GearSetting.RATIO_36_1, False)\nrearclamp = Motor(Ports.PORT18, GearSetting.RATIO_36_1, False)\nconveyor_belt = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\nlimit_switch_a = Limit(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3\n            # right = axis2\n            drivetrain_left_side_speed = controller_1.axis3.position()\n            drivetrain_right_side_speed = controller_1.axis2.position()\n            \n            # check if the value is inside of the deadband range\n            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n                # check if the left motor has already been stopped\n                if drivetrain_l_needs_to_be_stopped_controller_1:\n                    # stop the left drive motor\n                    left_drive_smart.stop()\n                    # tell the code that the left motor has been stopped\n                    drivetrain_l_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the left motor next\n                # time the input is in the deadband range\n                drivetrain_l_needs_to_be_stopped_controller_1 = True\n            # check if the value is inside of the deadband range\n            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n                # check if the right motor has already been stopped\n                if drivetrain_r_needs_to_be_stopped_controller_1:\n                    # stop the right drive motor\n                    right_drive_smart.stop()\n                    # tell the code that the right motor has been stopped\n                    drivetrain_r_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the right motor next\n                # time the input is in the deadband range\n                drivetrain_r_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_l_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_r_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control four_bar\n            if controller_1.buttonL1.pressing():\n                four_bar.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                four_bar.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                four_bar.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n# Drivetrain Settings\ndrivetrain.set_drive_velocity(100, PERCENT)\ndrivetrain.set_turn_velocity(100, PERCENT)\n\n# fourbarclamp Settings\nfourbarclamp.set_stopping(HOLD)\nfourbarclamp.set_velocity(100, PERCENT)\ndef fourbarclamp_up():\n    fourbarclamp.spin(FORWARD)\n    wait(0.5, SECONDS)\n    fourbarclamp.stop()\n    fourbarclamp.set_stopping(HOLD)\ndef fourbarclamp_down():\n    fourbarclamp.spin(REVERSE)\n    wait(0.3, SECONDS)\n    fourbarclamp.stop()\n    fourbarclamp.set_stopping(HOLD)\ncontroller_1.buttonDown.pressed(fourbarclamp_down)\ncontroller_1.buttonRight.pressed(fourbarclamp_up)\n\n# Conveyor Belt Settings\nconveyor_belt.set_velocity(75, PERCENT)\ndef conveyor_belt_start():\n    conveyor_belt.spin(REVERSE)\ndef conveyor_belt_stop():\n    conveyor_belt.stop()\ndef conveyor_belt_reverse():\n    conveyor_belt.spin(FORWARD)\ncontroller_1.buttonR1.pressed(conveyor_belt_start)\ncontroller_1.buttonX.pressed(conveyor_belt_stop)\ncontroller_1.buttonR2.pressed(conveyor_belt_reverse)\n\n# 4Bar Settings\nfour_bar.set_velocity(80, PERCENT)\nfour_bar.set_stopping(HOLD)\ndef four_bar_stop():\n    four_bar.stop()\n    four_bar.set_stopping(HOLD)\ncontroller_1.buttonL2.released(four_bar_stop)\ncontroller_1.buttonL1.released(four_bar_stop)\n\n# Rear Clamp Settings\nrearclamp.set_velocity(100, PERCENT)\nrearclamp.set_stopping(HOLD)\ndef rearclamp_up():\n    rearclamp.spin_for(REVERSE, 100, DEGREES)\ndef rearclamp_down():\n    rearclamp.spin_for(FORWARD, 100, DEGREES)\ncontroller_1.buttonB.pressed(rearclamp_down)\ncontroller_1.buttonY.pressed(rearclamp_up)\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.draw_image_from_file(\"darvert.bmp\", -120, 240)\n\ndef autonomous():\n    drivetrain.set_drive_velocity(100, PERCENT)\n    fourbarclamp.spin_for(FORWARD, 110, DEGREES, wait=False)\n    drivetrain.drive_for(FORWARD, 1170, MM)\n    drivetrain.set_drive_velocity(30, PERCENT)\n    drivetrain.drive_for(FORWARD, 100, MM)\n    fourbarclamp_down()\n    drivetrain.set_drive_velocity(100, PERCENT)\n    drivetrain.drive_for(REVERSE, 1000, MM)\n\ndef user_control():\n    brain.screen.clear_screen()\n    brain.screen.draw_image_from_file(\"darvert.bmp\", -120, 240)\n    while True:    \n        # place driver control in this while loop\n        wait(20, MSEC)\n        \n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()","textLanguage":"python","rconfig":[{"port":[11,2,1,12,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"7:5","direction":"rev","gyroType":"none","width":"392","unit":"mm","wheelbase":"315","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[17],"name":"four_bar","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[20],"name":"fourbarclamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[18],"name":"rearclamp","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[3],"name":"conveyor_belt","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"four_bar","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"limit_switch_a","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}