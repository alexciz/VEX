{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT15, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT13, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT14, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\nfour_bar = Motor(Ports.PORT19, GearSetting.RATIO_36_1, False)\nclaw = Motor(Ports.PORT20, GearSetting.RATIO_36_1, False)\nrear_lift = Motor(Ports.PORT11, GearSetting.RATIO_36_1, False)\nconveyor_belt = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n# define variables used for controlling motors based on controller inputs\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\n# Drivetrain Settings\ndrivetrain.set_drive_velocity(75, PERCENT)\ndrivetrain.set_turn_velocity(75, PERCENT)\n\n# Claw Settings\nclaw.set_stopping(HOLD)\ndef claw_up():\n    claw.spin(FORWARD)\n    wait(1, SECONDS)\n    claw.stop()\n    claw.set_stopping(HOLD)\ndef claw_down():\n    claw.spin(REVERSE)\n    wait(1, SECONDS)\n    claw.stop()\n    claw.set_stopping(HOLD)\ncontroller_1.buttonUp.pressed(claw_up)\ncontroller_1.buttonDown.pressed(claw_down)\n\n# Conveyor Belt Settings\nconveyor_belt.set_velocity(75, PERCENT)\ndef conveyor_belt_start():\n    conveyor_belt.spin(FORWARD)\ndef conveyor_belt_stop():\n    conveyor_belt.stop()\ncontroller_1.buttonB.pressed(conveyor_belt_start)\ncontroller_1.buttonX.pressed(conveyor_belt_stop)\nif controller_1.buttonY.pressing():\n    conveyor_belt.spin(REVERSE)\n\n# 4Bar Settings\nfour_bar.set_velocity(100, PERCENT)\nfour_bar.set_stopping(HOLD)\ndef four_bar_stop():\n    four_bar.stop()\n    four_bar.set_stopping(HOLD)\nif controller_1.buttonL2.pressing():\n    four_bar.spin(FORWARD)\nif controller_1.buttonL1.pressing():\n    four_bar.spin(REVERSE)\ncontroller_1.buttonL2.released(four_bar_stop)\ncontroller_1.buttonL1.released(four_bar_stop)\n\n# Rear Lift Settings\nif controller_1.buttonR2.pressing():\n    rear_lift.spin(FORWARD)\nif controller_1.buttonR1.pressing():\n    rear_lift.spin(REVERSE)\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    while True:\n        wait(20, MSEC)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","rconfig":[{"port":[15,16,13,14,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[19],"name":"four_bar","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[20],"name":"claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[11],"name":"rear_lift","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[18],"name":"conveyor_belt","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"}},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}